buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE')
    }
}

allprojects {
    apply plugin: 'java'

    version = '1.0-SNAPSHOT'
    group = 'pl.edu.pw.ii.pik01'
    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://jasperreports.sourceforge.net/maven2"
        }
        maven {
            url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
        }
    }

    dependencies {
        compile 'com.google.guava:guava:16.0.1'
        compile 'joda-time:joda-time:2.3'
        compile 'com.h2database:h2:1.3.175'
        compile 'org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE'
        compile 'org.springframework.boot:spring-boot-starter-test:1.0.2.RELEASE'
        compile 'org.springframework.boot:spring-boot-starter-aop:1.0.2.RELEASE'
        compile 'org.springframework.boot:spring-boot-starter-security:1.0.2.RELEASE'
        compile 'net.sf.jasperreports:jasperreports:5.5.2'

        compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.3.3'

        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'org.assertj:assertj-core:1.6.0'
    }
}

project(':persistence') {
    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.0.2.RELEASE'
        compile 'org.jadira.usertype:usertype.core:3.1.0.GA'
        compile 'org.hibernate:hibernate-search-orm:5.0.0.Alpha4'
        compile 'org.hibernate:hibernate-search-analyzers:5.0.0.Alpha1'
        compile 'org.hibernate:hibernate-envers:4.3.4.Final'
    }
}

project(':service') {
    sourceSets {
        integrationTest {
            java.srcDir file('src/integrationTest/java')
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    check.dependsOn integrationTest

    dependencies {
        integrationTestCompile sourceSets.main.output
        integrationTestCompile configurations.testCompile
        integrationTestCompile sourceSets.test.output
        integrationTestRuntime configurations.testRuntime

        compile project(':persistence')
    }
}

project(':webapp') {
    apply plugin: 'spring-boot'

    configurations.create('jasperreports')
    configurations.jasperreports {
        transitive = true
    }

    dependencies {
        compile project(':persistence')
        compile project(':service')

        compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.3.3'

        jasperreports 'net.sf.jasperreports:jasperreports:5.5.2'
        jasperreports 'joda-time:joda-time:2.3'
        jasperreports group: 'org.eclipse.jdt', name: 'core', version: '3.1.1'

        testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    }

    sourceSets {
        jasper {
            srcDir = file(relativePath('src/main/resources/reports'))
            classesDir = file(relativePath('src/main/resources/compiledReports'))
        }
    }

    task compileJasperJava(overwrite: true) << {
        ant.delete(failonerror: 'false') {
            fileset(dir: sourceSets.jasper.classesDir)
        }

        ant {
            taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath)
            sourceSets.jasper.classesDir.mkdirs()
            jrc(srcdir: sourceSets.jasper.srcDir, destdir: sourceSets.jasper.classesDir) {
                include(name:'**/*.jrxml')
            }
        }
    }

    classes.dependsOn compileJasperJava
}
