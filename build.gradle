buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.1.1.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'

configurations.create('jasperreports')
configurations.jasperreports {
    transitive = true
}

version = '1.0-SNAPSHOT'
group = 'pl.edu.pw.ii.pik01'
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://jasperreports.sourceforge.net/maven2"
    }
    maven {
        url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }
    maven {
        url nexusHost + "/content/repositories/snapshots"
    }
}

sourceSets {
    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
        }
        resources {
            srcDir file('src/integrationTest/resources')
        }
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

sourceSets {
    jasper {
        srcDir = file(relativePath('src/main/resources/reports'))
        classesDir = file(relativePath('src/main/resources/compiledReports'))
    }
}

task compileJasperJava(overwrite: true) << {
    ant.delete(failonerror: 'false') {
        fileset(dir: sourceSets.jasper.classesDir)
    }

    ant {
        taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath)
        sourceSets.jasper.classesDir.mkdirs()
        jrc(srcdir: sourceSets.jasper.srcDir, destdir: sourceSets.jasper.classesDir) {
            include(name:'**/*.jrxml')
        }
    }
}

classes.dependsOn compileJasperJava

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime

    compile 'com.google.guava:guava:16.0.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'

    compile 'joda-time:joda-time:2.3'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.3.3'

    compile 'org.postgresql:postgresql:9.3-1101-jdbc41'
    compile('org.liquibase:liquibase-core:3.2.0') {
        exclude group: 'org.eclipse.jetty'
    }
    runtime('com.mattbertolini:liquibase-slf4j:1.2.1') {
        exclude group: 'org.eclipse.jetty'
    }

    compile 'org.springframework.boot:spring-boot-starter-web:1.1.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-aop:1.1.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:1.1.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.1.1.RELEASE'

    compile 'org.jadira.usertype:usertype.core:3.1.0.GA'
    compile 'org.hibernate:hibernate-search-orm:5.0.0.Alpha4'
    compile 'org.hibernate:hibernate-search-analyzers:5.0.0.Alpha1'
    compile 'org.hibernate:hibernate-envers:4.3.4.Final'
    compile 'org.hibernate:hibernate-validator:5.1.1.Final'

    compile 'net.sf.jasperreports:jasperreports:5.5.2'

    jasperreports 'net.sf.jasperreports:jasperreports:5.5.2'
    jasperreports 'joda-time:joda-time:2.3'
    jasperreports group: 'org.eclipse.jdt', name: 'core', version: '3.1.1'

    testCompile 'com.h2database:h2:1.3.175'
    testCompile('org.springframework.boot:spring-boot-starter-test:1.1.1.RELEASE') {
        exclude group: 'junit'
        exclude group: 'org.mockito'
        exclude group: 'org.hamcrest'
    }
    testCompile('junit:junit:4.11') {
        exclude group: 'org.hamcrest'
    }
    testCompile('org.mockito:mockito-all:1.9.5') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.assertj:assertj-core:1.6.0'
    testCompile 'org.assertj:assertj-core:1.6.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexusHost + "/content/repositories/snapshots") {
                authentication(userName: nexusUser, password: nexusPassword)
            }
        }
    }
}
